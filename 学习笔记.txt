

vagrant provision 刷新
vagrant halt 关机
vagrant up  重建
vagrant box remove laravel/homestead --box-version 0 删除版本
mkdir xx 建立文件夹名
vagrant global-status查看box



～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～
路由
Route::get($uri, $callback);
Route::post($uri, $callback);
Route::put($uri, $callback);
Route::patch($uri, $callback);
Route::delete($uri, $callback);
Route::options($uri, $callback);
match指定http方式
any 所有http方式

必选参数
Route::get('user/{name}', function ($name = null) {
return $name;
});
可选参数
Route::get('user/{name?}', function ($name = null) {
return $name;
});
正则约束
可以使用路由实例上的 where 方法来约束路由参数的格式。where 方法接收参数名和一个正则表达式来定义该参数如何被约束：
Route::get('user/{id}/{name}', function ($id, $name) {
//
})->where(['id' => '[0-9]+', 'name' => '[a-z]+']);

路由别名：
Route::get('user/profile', function () {
//
})->name('profile');

使用route()生成url地址
$url = route('profile');
route()函数第二个参数为http传递的参数
$url = route('profile', ['id' => 1]);

路由群组
路由前缀，公用同一个前缀。例如shopeach.com/create/post,
shopeach.com/create/question,

Route::group(['prefix' => ‘create’], function () {
Route::get(‘post’, function () {
// 匹配 "/create/post" URL
});
Route::get(‘question’, function () {
// 匹配 "/create/question" URL
});
});

路由访问控制器
Route::get('edit/post/{id}','CreateController@eidtpost')->where(['id'=>'[0-9]+']);

视图，模版
{{$v}}

模型

查询构造器简介
插入
DB::table('users')->insert(
    ['email' => 'john@example.com', 'votes' => 0]
);
返回自增的id
$id = DB::table('users')->insertGetId(
    ['email' => 'john@example.com', 'votes' => 0]
);
更新
DB::table('users')
     ->where('id', 1)
     ->update(['votes' => 1]);
更新 JSON 字段的时候，需要使用 -> 语法访问 JSON 对象上相应的值
DB::table('users')
    ->where('id', 1)
    ->update(['options->enabled' => true]);

get() 获取表中所有数据
$students = DB::table('student')->get();

first() 获取第一条数据（随机）,配合orderBy 一起使用
$students =  DB::table('student')->orderBy('id','asc')->first();
value如果不需要完整的数据集，只获取单个数据
$students =  DB::table('student')->orderBy('id','asc')->value('name');

where 多条件查询
$students = DB::table('student')
    ->where([
        ['id','>=','1'],
        ['age','=','18'],
    ])
    ->get();

pluck 取结果集中一列特定列，返回字符串类型
$students = DB::table('student')
    ->pluck('id','name','age');

lists 按照Key=>value 对 的方式返回数组；最多两个参数，第一个参数作为value,第二个做为key。一个参数时与pluck用法一样
$students = DB::table('student')
    ->where([
        ['id','>=','1'],
        ['age','=','18'],
        ])->lists('id','name','age');
select() 指定查询的字段
$students = DB::table('student')
    ->select('id','name','age')
    ->get();
chunk() 方法 每次返回指定条数，直到所有的数据都返回完，返回二元数组
		echo '<pre>';	//预格式化
		DB::table('student')->chunk(2,function($students){
			var_dump($students);
			//当flase时停止，
			if ($sh=''){
			    return false;
            }
		});
		dd($students);
聚合函数
DB::table('as_admin')->select('id','name','age')->count(); //返回记录数
DB::table('as_admin')->select('id','name','age')->max('age'); //最大值，min同理
DB::table('as_admin')->select('id','name','age')->avg('age'); //返回平均值
DB::table('as_admin')->select('id','name','age')->sum('sum'); //返回指定字段数据
～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～
ReactDOM.render(‘要插入的html代码’,’要插入的位置’)最基本方法，

React.createClass 
class Clock extends React.Component 
方法就用于生成一个组件类，第一种是旧语法，第二种是新语法

react 三个生命周期
Mounting：已插入真实 DOM
Updating：正在被重新渲染
Unmounting：已移出真实 DOM

React 为每个状态都提供了两种处理函数，will 函数在进入状态之前调用，did 函数在进入状态之后调用，三种状态共计五种处理函数。
componentWillMount()
componentDidMount()
componentWillUpdate(object nextProps, object nextState)
componentDidUpdate(object prevProps, object prevState)
componentWillUnmount()

componentWillReceiveProps(object nextProps)：已加载组件收到新的参数时调用
shouldComponentUpdate(object nextProps, object nextState)：组件判断是否重新渲染时调用



创建react应用
create-react-app app name
cd app name
subl
npm start

fetch 获取请求数据
if(self.fetch) {
    // 使用 fetch 框架处理
} else {
    // 使用 XMLHttpRequest 或者其他封装框架处理
}

